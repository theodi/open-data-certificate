-# TODO: js for slider
- rg ||= nil
- renderer = q.renderer(g ||= nil)
- disabled = defined?(disableFlag) ? disableFlag : false
- question_text = q_text(q, @render_context, I18n.locale)

- pickTypes = Set.new(['one', 'any'])
- selectFields = Set.new([:dropdown, :inline_dropdown, :default_dropdown, :slider, :repeater_dropdown])

- case q.display_type
- when 'hidden' #don't do anything
- when 'label'
  .subsection-label
    %h2.container
      != question_text
      %small= q.help_text

- else
  %li.container
    - r = response_for(@response_set, q, nil, rg)

    - state = 'ok' unless r.new_record?
    - state = 'warning' if r.error || r.any_metadata_missing

    - classes = {'row' => true, 'question-row' => true, "q_#{renderer}" => true}
    - classes[q.css_class(@response_set)] = true
    - classes['choice-boxes'] = q.pick == "one" || q.pick == "any"
    - classes['compact-validation'] = pickTypes.include?(q.pick) || selectFields.include?(renderer)
    - classes['mandatory'] = q.is_mandatory
    - classes['has-response'] = !r.new_record?
    - classes['no-response'] = r.new_record?
    - classes['autocompleted'] = r.autocompleted
    - classes[state] = true if state

    - data = {}
    - data['reference-identifier'] = rg ? "#{q.reference_identifier}_#{rg}" : q.reference_identifier
    - data['autocompleted-value'] = r.auto_value.kind_of?(Array) ? r.auto_value.try(:join, ',') : r.auto_value if r.auto_value
    - data['metadata-field'] = true if q.metadata_field?

    - attrs = {:data => data}
    - attrs[:id] = rg ? "q_#{q.id}_#{rg}" : "q_#{q.id}"
    - attrs[:class] = classes.select{ |key, value| value }.keys.join(' ')

    -# if we are using the default renderer, we will display the question text within that
    = f.inputs (renderer == :default ? '' : question_text), attrs do

      -# for multiple answers, we want to give the question once
      -# at the start of the questions
      - if q.pick == 'one' || q.pick == 'any'
        %label.span8.question_label!= question_text

      .span8
        - i = response_idx

        - case renderer
        - when :image, :label, :default_label, :inline_label, :repeater_label
        - when :dropdown, :inline_dropdown, :default_dropdown, :slider, :repeater_dropdown
          = f.semantic_fields_for i, r do |ff|
            = ff.input :question_id, :as => :quiet
            = ff.input :response_group, :as => :quiet, :value => rg if g && g.display_type == "repeater"
            = ff.input :api_id, :as => :quiet
            = ff.input :autocompleted, :as => :quiet
            = ff.input :answer_id, :as => :select, :collection => q.answers.map{|a| [a.text, a.id, {'data-reference-identifier' => "#{q.reference_identifier}_#{a.reference_identifier}"}]}, :include_blank => (renderer != :slider), :label => q.text, :input_html => { :disabled => disabled }, :status_message => { :message => t('surveyor.autocompleted_data') }
        - else # :default, :inline, :inline_default

          - if q.pick == "one"
            = f.semantic_fields_for i, r do |ff|
              = ff.input :question_id, :as => :quiet
              = ff.input :response_group, :as => :quiet, :value => rg if g && g.display_type == "repeater"
              = ff.input :api_id, :as => :quiet
              = ff.input :autocompleted, :as => :quiet

          - if q.pick == 'one' || q.pick == 'any'
            %div.status-above
              %div.status-icon
                %i.icon.icon-variable
              %div.span8.status-message
                %span= r.any_metadata_missing ? t('surveyor.missing_metadata') : t('surveyor.autocompleted_data')
                %i.arrow-border
                %i.arrow
            %div.choice-buttons.status-wrapper
              - q.answers.each do |a|
                - next if disabled and @response_set.responses.where( :question_id => q.id, :answer_id => a.id).empty?
                = render a.custom_renderer || '/partials/answer', :q => q, :a => a, :f => f, :rg => rg, :g => g, :disableFlag => disabled, :question_text => question_text

          - else
            - q.answers.each do |a|
              = render a.custom_renderer || '/partials/answer', :q => q, :a => a, :f => f, :rg => rg, :g => g, :disableFlag => disabled, :question_text => question_text

      - unless (q.help_text.blank?)
        %aside.span4.question-meta{"data-meta-for"=> rg ? "#{q.reference_identifier}_#{rg}" : q.reference_identifier}
          %p
            != q.help_text_for(@render_context, I18n.locale)
            - if (q.help_text_more_url)
              %a{:href => q.help_text_more_url} Read more...
