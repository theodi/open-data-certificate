-# TODO: js for slider
- rg ||= nil
- repeated_template ||= false
- renderer = q.renderer(g ||= nil)
- disabled = defined?(disableFlag) ? disableFlag : false
- question_text = q_text(q, @render_context, I18n.locale)

- case q.display_type
- when 'hidden' #don't do anything
- when 'label'
  %li.subsection-label
    %h2.container
      != q.heading
      %small= q.subheading

- else
  %li.question.container
    - r = response_for(@response_set, @responses, q, nil, rg)
    - all_autocompleted = r.all_autocompleted(@responses)

    - url_field = r.answer && r.answer.input_type == 'url'
    - url_error = !r.url_valid_or_explained?

    - state = 'no-response'
    - state = 'ok' if r.filled?
    - state = 'error' if r.empty? && q.mandatory?

    - if url_field
      - state = 'url-verified'
      - status_message = t('surveyor.url_verified')

      - if r.explained?
        - state = 'url-explained'
        - status_message = t('surveyor.url_explained')

    - if r.autocompletable?
      - state = 'autocompleted'
      - status_message = t('surveyor.autocompleted')

      - if !all_autocompleted
        - state = 'autocompleted-changed'
        - status_message = t('surveyor.autocompleted_changed')

        - if r.explained?
          - state = 'autocompleted-explained'
          - status_message = t('surveyor.autocompleted_explained')

    - if url_field && url_error
      - state = 'url-warning'
      - status_message = t('surveyor.url_warning')

      - if all_autocompleted
        - state = 'autocompleted-url-warning'
        - status_message = t('surveyor.autocompleted_url_warning')

    - if r.any_metadata_missing(@responses)
      - state = 'metadata-missing'
      - status_message = t('surveyor.metadata_missing')

      - if r.explained?
        - state = 'autocompleted-explained'
        - status_message = t('surveyor.autocompleted_explained')

    - classes = ['row', 'question-row', "q_#{renderer}"]
    - classes << q.css_class(@response_set)
    - classes << 'choice-boxes' if q.choice_type?
    - classes << 'mandatory' if q.mandatory?
    - classes << 'autocompleted' if all_autocompleted
    - classes << state if state
    - if q.choice_type? && renderer != :dropdown
      - classes << ['inline-validation', 'compact-validation']

    - data = {}
    - data['reference-identifier'] = rg ? "#{q.reference_identifier}_#{rg}" : q.reference_identifier
    - data['autocompletable'] = r.autocompletable?
    - data['autocompleted-value'] = r.formatted_auto_value
    - data['metadata-field'] = true if q.metadata_field?
    - data['mandatory'] = q.mandatory?

    - id = rg ? "q_#{q.id}_#{rg}" : "q_#{q.id}"
    - attrs = {data: data, id: id, class: classes.join(' ')}

    -# if we are using the default renderer, we will display the question text within that
    = f.inputs (renderer == :default ? '' : question_text), attrs do

      -# for multiple answers, we want to give the question once
      -# at the start of the questions
      - if q.choice_type?
        %label.span8.question_label
          != question_text
          = question_requirement_with_badge(@survey_calculator.requirement_level_for_question(q.id))

      .span8
        - i = response_idx

        - case renderer
        - when :image, :label, :default_label, :inline_label, :repeater_label
        - when :dropdown, :inline_dropdown, :default_dropdown, :slider, :repeater_dropdown
          = f.semantic_fields_for i, r do |ff|
            = ff.input :question_id, :as => :quiet
            = ff.input :response_group, :as => :quiet, :value => rg if g && g.display_type == "repeater"
            = ff.input :api_id, :as => :quiet
            = ff.input :autocompleted, :as => :quiet
            = ff.input :answer_id, :as => :select, :collection => q.answers.map{|a| [a.answer_text, a.id, {'data-reference-identifier' => "#{q.reference_identifier}_#{a.reference_identifier}"}]}, :include_blank => (renderer != :slider), :label => q.heading, :input_html => { :disabled => disabled }, :status_message => { :message => status_message }, :prompt => I18n.t('interface.select')
        - else # :default, :inline, :inline_default, :repeater_default
          - if q.pick == "one"
            = f.semantic_fields_for i, r do |ff|
              = ff.input :question_id, :as => :quiet
              = ff.input :response_group, :as => :quiet, :value => rg if g && g.display_type == "repeater"
              = ff.input :api_id, :as => :quiet
              = ff.input :autocompleted, :as => :quiet

          - if q.choice_type?
            %div.choice-buttons.status-wrapper
              - q.answers.each do |a|
                - next if disabled and @response_set.responses.where( :question_id => q.id, :answer_id => a.id).empty?
                = render '/partials/answer', q: q, a: a, f: f, rg: rg, g: g, disableFlag: disabled, question_text: question_text, status_message: status_message
            %div.status-below
              %div.status-icon
                %i.icon-loading.icon-spin.icon-refresh.icon-large
                %i.icon.icon-variable
              %div.span8.status-message
                %span= status_message
                %i.arrow-border
                %i.arrow

          - else
            - q.answers.each do |a|
              = render '/partials/answer', q: q, a: a, f: f, rg: rg, g: g, disableFlag: disabled, question_text: question_text, status_message: status_message, repeated_template: repeated_template, minimum_level: @survey_calculator.requirement_level_for_question(q.id)

        .explanation
          - i = (i.to_i + 1).to_s if q.pick == 'any'
          - i = (i.to_i + q.answers.length).to_s unless q.choice_type?
          = f.semantic_fields_for i, r do |ff|
            = ff.input :explanation, as: :additional_text, label: t('surveyor.override_explanation_title'), subtitle: url_field && url_error ? t('surveyor.url_explanation') : t('surveyor.autocomplete_explanation')

      %aside.span4.question-meta{"data-meta-for"=> rg ? "#{q.reference_identifier}_#{rg}" : q.reference_identifier}
        - unless (q.help_text.blank?)
          %p
            != q.help_text_for(@render_context, I18n.locale)
            - if (q.help_text_more_url)
              %a{:href => q.help_text_more_url}
                = t('surveyor.question_comment_read_more')
