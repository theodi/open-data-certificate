-# TODO: disabled
- rg ||= nil
- repeated_template ||= false

- r = response_for(@response_set, q, a, rg)
- r.reference_identifier = a.reference_identifier

- i = response_idx(q.pick != "one") # argument will be false (don't increment i) if we're on radio buttons
- disabled = defined?(disableFlag) ? disableFlag : false
- reference_identifier = "#{q.reference_identifier}_#{a.reference_identifier}"

= f.semantic_fields_for i, r do |ff|
  = ff.input :question_id, :as => :quiet unless q.pick == "one" # don't repeat question_id if we're on radio buttons
  = ff.input :api_id, :as => :quiet unless q.pick == "one"
  = ff.input :response_group, :value => rg, :as => :quiet if q.pick != "one" && g && g.display_type == "repeater"

  - if a.input_type == 'url' && r.error
    - status_message = t('surveyor.please_check_that_the_url_exists')
    - status_message = t('surveyor.autocompleted_url_incorrect') if r.autocompleted

  - case q.pick
  - when "one"
    = ff.input :answer_id, :as => :surveyor_radio, :collection => [[a.text_for(nil, @render_context, I18n.locale).html_safe, a.id]], :label => false, :input_html => {:class => a.css_class, :disabled => disabled}, :wrapper_html => {'data-reference-identifier' => reference_identifier}, :response_class => a.response_class, :status_message => { :message => status_message }

  - when "any"
    = ff.input :autocompleted, :as => :quiet
    = ff.input :answer_id, :as => :surveyor_check_boxes, :collection => [[a.text_for(nil, @render_context, I18n.locale).html_safe, a.id]], :label => false, :input_html => {:class => a.css_class, :disabled => disabled}, :wrapper_html => {'data-reference-identifier' => reference_identifier, :class => r.metadata_missing ? 'warning' : ''}, :response_class => a.response_class, :status_message => { :message => status_message }

  - when "none"
    - if %w(date datetime time float integer string text).include? a.response_class
      = ff.input :answer_id, :as => :quiet, :input_html => {:class => a.css_class, :value => a.id}
      - answer_attrs = {}
      - answer_attrs[:as] = rc_to_as(a.response_class)
      - answer_attrs[:hint] = a.text_for(:post, @render_context, I18n.locale)
      - answer_attrs[:label] = "#{h question_text}".html_safe

      - answer_attrs[:status_message] = { :message => status_message }
      - if q.renderer == :repeater_default
        - answer_attrs[:remove_button] = repeated_template || @response_set.count_group_responses([q]) != 1

      - default_value = a.default_value_for(@render_context, I18n.locale)
      - answer_attrs[:input_html] = generate_pick_none_input_html(r.to_formatted_s, default_value, a.css_class, a.response_class, disabled, a.input_mask, a.input_mask_placeholder)
      - answer_attrs[:input_html][:type] = a.input_type unless a.input_type.blank?
      - answer_attrs[:input_html][:placeholder] = a.placeholder_for(@render_context, I18n.locale) unless a.placeholder.blank?
      - answer_attrs[:input_html][:required] = 'required' if q.is_mandatory?

      = ff.input rc_to_attr(a.response_class), answer_attrs
    - else
      = a.text_for(nil, @render_context, I18n.locale)
  - unless (g && g.display_type == "grid") || a.help_text.blank?
    %aside.span4.answer-meta{"data-meta-for"=> reference_identifier}
      %p
        != a.help_text_for(@render_context, I18n.locale)
        - if (a.help_text_more_url)
          %a{:href => a.help_text_more_url} Read more...
