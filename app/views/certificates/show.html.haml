- minimal = params[:action] === 'embed'

- if @certificate.expired? || @certificate.expiring?
  - content_for :header do
    %header.notice{class: @certificate.expired? ? 'notice-error' : 'notice-warning'}
      .container
        %h1
          %i.icon.icon-warning-sign
          - if @certificate.expired?
            Expired
            - notice = t('certificate.expired_notice', jurisdiction: @certificate.response_set.jurisdiction)
          - else
            Warning
            - notice = t('certificate.expiring_notice', jurisdiction: @certificate.response_set.jurisdiction, count: @certificate.days_to_expiry)
        %p= notice


- if @certificate.owned_by?(current_user)
  .container
    .row
      .span8.offset2
        .alert.alert-info.alert-call-to-action.clearfix
          - if @certificate.published?
            %p
              = t('certificates.published_congratulations')
            %ul
              %li
                = link_to(t("certificates.embed"), "#embed-#{@certificate.id}", :class => 'btn', 'data-toggle' => :modal)
                .description
                  = t('certificates.you_can_now_embed')
              - if @certificate.needs_updating? && @certificate.owned_by?(current_user)
                %li= link_to t('certificate.update_certificate'), continue_my_survey_path(response_set_code: @certificate.response_set.access_code, update: true), :class => 'btn btn-info'
              - unless highest_level_attained?(@certificate)
                %li
                  = link_to(t('certificate.edit_questionnaire'), continue_my_survey_path(response_set_code: @certificate.response_set.access_code), method: 'post', class: 'btn')
                  .description
                    = t('certificates.edit_for_higher_level')
          - elsif @certificate.attained_level == 'none'
            %p
              = t('certificate.no_level_yet')
            %ul
              %li
                = link_to t('certificate.how_to_improve'), improvements_dataset_certificate_path(@certificate.response_set.dataset, @certificate), class: 'btn btn-primary'
                .description
                  = t('certificate.how_to_improve_description')
              %li
                =link_to t('certificate.edit_questionnaire'), continue_my_survey_path(response_set_code: @certificate.response_set.access_code), method: 'post', class: 'btn'
          - else
            %p
              = t('certificate.congratulations_for_level', level: t("levels.#{@certificate.attained_level}.title"))
            %ul
              %li
                = link_to t('certificate.publish_now'), [:publish, @certificate.response_set], method: :post, data: {code: @certificate.response_set.access_code}, class: 'btn btn-primary'
                .description
                  = t('certificate.publish_it_now')
              %li
                =link_to t('certificate.edit_questionnaire'), continue_my_survey_path(response_set_code: @certificate.response_set.access_code), method: 'post', class: 'btn'

.certificate.hero-unit{class: "#{@certificate.attained_level}-level"}
  - unless minimal
    %ul.pull-right.unstyled
      - if @certificate.published?
        %li= link_to(t("certificates.embed_this_on_your_site"), "#embed-#{@certificate.id}", :class => 'btn btn-small btn-info pull-right', 'data-toggle' => :modal)

      - if @certificate.auto_generated?
        %li=link_to(t('certificate.claim_this_certificate'), "#claim-#{@certificate.id}", :class => 'btn btn-small btn-info', :'data-toggle' => :modal)

    - content_for :modal_content do
      =render :partial => 'shared/embed_code', :locals => {:certificate => @certificate}
      - if @certificate.auto_generated?
        =render :partial => 'claims/claim', :locals => {:certificate => @certificate}


  .certificate-badge.centered

  .certificate-summary
    %p.certificate-level
      = t("levels.#{@certificate.attained_level}.title_with_level")
      %small
        = t @certificate.certification_type, scope: 'certificate.certification_types'
      %span.jurisdiction
        %span.badge= @certificate.response_set.jurisdiction
        %span.status= @certificate.response_set.survey.try(:status)
    %p
      = t("certificate.this_data_has_achieved")
      %strong.certificate-level
        #{t("levels.#{@certificate.attained_level}.title_with_level")}
      = t("certificate.on_date", date: @certificate.published_at.strftime("%d %B %Y")) if @certificate.published?
      = t("certificate.which_means")
      = t("levels.#{@certificate.attained_level}.description")

  %div
    .row
      .span9.offset3
        %h1= @certificate.response_set.title

- if admin?
  = form_for @certificate, url: dataset_certificate_path(@certificate.response_set.dataset.id, @certificate.id), html: {class: "admin-functions #{@certificate.audited ? 'admin-approved' : ''}"} do |f|
    - if @certificate.audited
      %i.icon-ok.icon-large
      = t("certificate.audited")
    - else
      %i.icon-info-sign.icon-large
      = t("certificate.not_audited")

    = f.hidden_field :audited, value: !@certificate.audited
    =submit_tag t(@certificate.audited ? "certificate.unmark_audited" : "certificate.mark_audited"), class: 'btn'

- if minimal # don't show the summary
  =render @certificate.response_set
- else
  .row.certificate-content
    .span3
      .well.summary
        = render 'shared/response_set_summary', response_set: @certificate.response_set

      .well.verification
        = render 'community_verification_panel'

    .span9
      = render @certificate.response_set
